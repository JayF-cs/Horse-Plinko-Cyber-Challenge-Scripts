#Run cat /etc/passwd | cut -d: -f1  <----- To see every account name
#Run awk -F: '{print $1, $7}' /etc/passwd <-------- Identify accounts that can log in
#	Users with /bin/bash, /bin/sh, /bin/zsh, etc. are real login accounts.
#Run getent group sudo <-------- getent group sudo
#Run sudo last <------- Shows who logged in and when
# ps -eo user,pid,cmd --sort=user <-------- See processes by user
# Search processes for keywords
#ps -eo user,pid,cmd | egrep "nc |ncat |socat |bash -i|/dev/tcp|curl |wget |base64|perl -e|ruby -e|python -c" --color=auto

#CHEAT SHEET
#nc, socat, ncat → remote access/listeners
#curl ... | sh, wget ... | sh → downloader+executor
#/tmp/ or /dev/shm/ in cmd or exe path → dropped binary
#base64 -d | bash, eval → obfuscated payload
#python -c, perl -e, ruby -e → one-liners
#ssh -R, autossh → reverse tunnels
#php eval, base64_decode in webroot → webshell

#Run sudo kill -9 <PID> <-------To kill a process
#Or
#Rund sudo kill -9 <user> <-------To kill all process by user

#========================================
#ACTUAL SCRIPT

#!/usr/bin/env bash
echo "=== All accounts with login shells ==="
awk -F: '$7 ~ /(bash|sh|zsh)$/ {print $1, $7}' /etc/passwd

echo "=== Users in sudo/wheel groups ==="
getent group sudo 2>/dev/null
getent group wheel 2>/dev/null

echo "=== Currently logged in ==="
who -a

echo "=== Suspicious running processes by user ==="
ps -eo user,pid,cmd --sort=user | grep -vE "root|systemd|nologin"
#================================================
#SCRIPT FOR SUS PROCESSES

##!/usr/bin/env bash
# scan_suspicious.sh — read-only scanner for suspicious processes/files
# Usage: sudo ./scan_suspicious.sh
# Produces human-readable sections; DOES NOT modify the system.

set -euo pipefail
IFS=$'\n\t'

PATTERN_PROCS="nc[[:space:]]|ncat|socat|bash -i|/dev/tcp|curl |wget .* -O -|base64|perl -e|ruby -e|python -c|ssh .* -R|ssh .* -L|autossh"
PATTERN_FILES="eval\\(|base64_decode|shell_exec|passthru|system\\(|exec\\(|curl .*\\| sh|wget .* -O -"

TMP_OUT="/tmp/scan_suspicious_$$.txt"
: > "$TMP_OUT"

echo "Scan started: $(date -u)" | tee -a "$TMP_OUT"
echo "Patterns (processes): $PATTERN_PROCS" | tee -a "$TMP_OUT"
echo "Patterns (files/webroot): $PATTERN_FILES" | tee -a "$TMP_OUT"
echo

# 1) Processes matching suspicious patterns (full cmdline)
echo "=== Suspicious processes (pgrep -afil) ===" | tee -a "$TMP_OUT"
pgrep -afil --regexp "(?i)(${PATTERN_PROCS})" 2>/dev/null | tee -a "$TMP_OUT" || echo "(no matches)" | tee -a "$TMP_OUT"
echo

# 2) Processes via ps with user/pid/cmd (more verbose)
echo "=== Processes (user pid cmd) matching patterns ===" | tee -a "$TMP_OUT"
ps -eo user,pid,cmd --no-headers | egrep -i --color=never "${PATTERN_PROCS}" 2>/dev/null | tee -a "$TMP_OUT" || echo "(no matches)" | tee -a "$TMP_OUT"
echo

# 3) Listening network sockets (show possible listeners/tunnels)
echo "=== Listening sockets (ss -tunap) ===" | tee -a "$TMP_OUT"
ss -tunap 2>/dev/null | tee -a "$TMP_OUT" || echo "(ss not available, try netstat -tulpen)" | tee -a "$TMP_OUT"
echo

# 4) Search common webroot/tmp locations for dangerous PHP/one-liners
echo "=== Grep common locations for webshell/downloader patterns ===" | tee -a "$TMP_OUT"
SEARCH_PATHS=( /var/www /srv /usr/share/nginx /tmp /var/tmp /dev/shm /home )
for p in "${SEARCH_PATHS[@]}"; do
  if [ -d "$p" ]; then
    echo "--- Scanning $p ---" | tee -a "$TMP_OUT"
    # use --binary-files=without-match to skip binary files
    grep -RIn --binary-files=without-match -E "${PATTERN_FILES}" "$p" 2>/dev/null | tee -a "$TMP_OUT" || echo "(no matches in $p)" | tee -a "$TMP_OUT"
  fi
done
echo

# 5) Recent file modifications in webroots (last 7 days) - quick list
echo "=== Recently modified files in /var/www (7 days) ===" | tee -a "$TMP_OUT"
if [ -d /var/www ]; then
  find /var/www -type f -mtime -7 -ls 2>/dev/null | tee -a "$TMP_OUT" || echo "(none or permission denied)" | tee -a "$TMP_OUT"
else
  echo "(no /var/www directory)" | tee -a "$TMP_OUT"
fi
echo

# 6) SUID files in unusual locations (quick)
echo "=== SUID files in /tmp, /home, /var (may indicate persistence) ===" | tee -a "$TMP_OUT"
find /tmp /var /home -perm /4000 -type f -ls 2>/dev/null | tee -a "$TMP_OUT" || echo "(no suid found in these paths or permission denied)" | tee -a "$TMP_OUT"
echo

# 7) Crontabs & scheduled tasks
echo "=== Root crontab (if readable) ===" | tee -a "$TMP_OUT"
crontab -l 2>/dev/null | sed 's/^/    /' | tee -a "$TMP_OUT" || echo "(no root crontab or permission denied)" | tee -a "$TMP_OUT"
echo
echo "=== /etc/cron.* and /var/spool/cron contents ===" | tee -a "$TMP_OUT"
ls -la /etc/cron.* /var/spool/cron /var/spool/cron/crontabs 2>/dev/null | tee -a "$TMP_OUT" || echo "(none or permission denied)" | tee -a "$TMP_OUT"
echo

# 8) systemd suspicious unit files (user-created units)
echo "=== systemd unit files in /etc/systemd/system (non-default units) ===" | tee -a "$TMP_OUT"
if [ -d /etc/systemd/system ]; then
  ls -la /etc/systemd/system | egrep -v "^total" 2>/dev/null | tee -a "$TMP_OUT"
fi
echo

# 9) Who is logged in / last logins
echo "=== Currently logged in (who) ===" | tee -a "$TMP_OUT"
who -a 2>/dev/null | tee -a "$TMP_OUT" || true
echo
echo "=== Recent logins (last -20) ===" | tee -a "$TMP_OUT"
last -n 20 2>/dev/null | tee -a "$TMP_OUT" || true
echo

echo "Scan completed: $(date -u)" | tee -a "$TMP_OUT"
echo
echo "Report saved to: $TMP_OUT"
echo "Interpretation: anything listed above is worth investigating. Use 'readlink -f /proc/<PID>/exe' and 'cat /proc/<PID>/cmdline' to inspect processes, and 'sudo cp <file> /root/quarantine' to capture binaries before removal."
